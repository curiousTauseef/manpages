<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
		<title>Elaborate Command</title>
		<link rel="stylesheet" href="css/book.css" type="text/css"/>
	</head>
	<body>
		<h3>
			Elaborate Command
		</h3>
		<p>
			Most UNIX commands have flags, arguments, return values, environmental variables, and so on.  So let's expand upon our
			example to include arguments for writing to an output file and a flag for outputting in uppercase letters.  Furthermore,
			we'll accept an optional prefix string on the command-line, and return non-zero on failure.
		</p>
		<p>
			This changes two parts of our manual: the <span class="sec">SYNOPSIS</span> section, where we'll record the invocation
			syntax of our command; and the <span class="sec">DESCRIPTION</span>, where we'll describe the command-line options.
			We'll also add a new section, <span class="sec">EXIT STATUS</span>, to describe the non-zero exit on failure.
		</p>
		<p>
			Let's start by documenting our command-line options in the <span class="sec">SYNOPSIS</span> section:
		</p>
		<div class="mdocin">
			.Sh SYNOPSIS                  
			<br />
			.Nm                           
			<br />
			.Op Fl C                      
			<br />
			.Op Fl o Ar output            
			<br />
			.Op Ar prefix                 
		</div>
		<p>
			The output renders as follows:
		</p>
		<div class="mdocout">
			<div class="mdoc-section">
				<h1>SYNOPSIS</h1>
				<table class="mdoc-synopsis">
					<col style="width: 5.00ex;"/>
					<col/>
					<tbody>
						<tr>
							<td>hello</td>
							<td>
								&#91;<span class="mdoc-opt"><b class="mdoc-flag">&#45;C</b></span>&#93; 
								&#91;<span class="mdoc-opt"><b class="mdoc-flag">&#45;o</b> 
									<i class="mdoc-arg">output</i></span>&#93; 
								&#91;<span class="mdoc-opt"><i class="mdoc-arg">prefix</i></span>&#93;
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<p>
			Already, we begin to see the output take shape with the <span class="screen">C</span> and <span class="screen">o</span>
			characters, and the <span class="screen">prefix</span>.  It's also clear that the <span class="macro">Op</span> macro
			surrounds its arguments in square brackets, just as <span class="macro">Qq</span> surrounded its line in double-quotes.
		</p>
		<p>
			But how did the formatter know to prefix the <span class="screen">C</span> and <span class="screen">o</span> with a
			dash, or underline the arguments <span class="screen">output</span> and <span class="screen">prefix</span>?  
		</p>
		<p>
			It's obvious this has something to do with <span class="screen">Fl</span> and <span class="screen">Ar</span>.
		</p>
		<p>
			Macro lines may in fact consist of multiple macros &mdash; sometimes nesting further macros, sometimes closing prior
			scopes to begin one anew.  The <span class="macro">Fl</span> and <span class="macro">Ar</span> words are macros nested
			within the scope of <span class="macro">Op</span>.  However, while <span class="macro">Op</span> contains both of these
			child scopes, the <span class="macro">Ar</span> macro closes out the <span class="macro">Fl</span> scope and begin its
			own.
		</p>
		<div class="mdocin">
			<span style="border: 1px solid green; padding: 2px;">.Op 
				<span style="border: 1px solid blue;">Fl C</span></span>
		</div>
		<div class="mdocin">
			<span style="border: 1px solid green; padding: 2px;">.Op 
				<span style="border: 1px solid blue;">Fl o</span>
				<span style="border: 1px solid blue;">Ar output</span></span>
		</div>
		<div class="mdocin">
			<span style="border: 1px solid green; padding: 2px;">.Op 
				<span style="border: 1px solid blue;">Ar prefix</span></span>
		</div>
		<p>
			<span style="border: 1px solid green; padding: 2px;">Outer parts</span> are an outer scope,
			while <span style="border: 1px solid blue; padding: 2px;">inner parts</span> are an inner scope.  Now it's
			easy to see how <span class="macro">Fl</span> prefixes only the <span class="screen">C</span> with a dash and not the
			arguments following: its scope is closed out by <span class="macro">Ar</span>.
		</p>
		<p>
			Note that to document a flag <span class="screen">Ar</span>, we would need to quote its arguments as <span
				class="screen">Fl "Ar"</span> (we'll later learn how to escape arguments with zero-width spaces to accomplish
			the same).  As there are many <span class="lang">mdoc</span> macros, a popular novice mistake is to unknowingly invoke a
			macro when expecting to print text.
		</p>
		<p>
			With our command syntax documented, let's document the arguments themselves.  To do so, we detail the meaning of flags
			and arguments in the <span class="sec">DESCRIPTION</span> section.
		</p>
		<div class="mdocin">
			The
			<br />
			.Nm
			<br />
			function prints
			<br />
			.Qq hello, world
			<br />
			and returns.
			<br />
			.Pp
			<br />
			Its arguments are as follows:
			<br />
			.Bl -tag -width Ds
			<br />
			.It Fl C
			<br />
			Print only uppercase letters.
			<br />
			.It Fl o Ar output
			<br />
			Write to file
			<br />
			.Ar output .
			<br />
			.It Ar prefix
			<br />
			Prefix the output with
			<br />
			.Ar prefix .
			<br />
			.El
		</div>
		<p>
			Immediately, we see the introduction of several new macros: <span class="macro">Pp</span>, <span
				class="macro">Bl</span>, <span class="macro">It</span>, and <span class="macro">El</span>.  More interestingly,
			we notice the text on the <span class="macro">Bl</span> begins with a dash, just as when passing arguments on a command
			line.  This is the first instance of a macro that accepts flags.  
		</p>
		<p>
			The rendered output of this fragment is as follows.
		</p>
		<div class="mdocout">
			Its arguments are as follows:
			<dl style="margin-top: 0.00em;margin-bottom: 0.00em;" class="mdoc-list mdoc-list-tag">
				<dt class="mdoc-list-tag" style="margin-top: 1.00em;">
					<b class="mdoc-flag">&#45;C</b></dt>
				<dd class="mdoc-list-tag" style="margin-left: 6.00ex;">
					Print only uppercase letters.</dd>
				<dt class="mdoc-list-tag" style="margin-top: 1.00em;">
					<b class="mdoc-flag">&#45;o</b> <i class="mdoc-arg">output</i></dt>
				<dd class="mdoc-list-tag" style="margin-left: 6.00ex;">
					Write to file <i class="mdoc-arg">output</i>.</dd>
				<dt class="mdoc-list-tag" style="margin-top: 1.00em;">
					<i class="mdoc-arg">prefix</i></dt>
				<dd class="mdoc-list-tag" style="margin-left: 6.00ex;">
					Prefix the output with <i class="mdoc-arg">prefix</i>.</dd>
			</dl>
		</div>
		<p>
			It should be clear that the <span class="macro">Pp</span> macro, which always stands alone, introduces a vertical
			paragraph break.
		</p>
		<p>
			Earlier, I introduced the concept of a multi-line scope for <span class="macro">Sh</span>, which was closed and
			re-opened by subsequent invocations of <span class="macro">Sh</span>.  In this fragment, the <span
				class="macro">Bl</span> macro (for <q>begin list</q>) is explicitly closed out by the <span
				class="macro">El</span> maro (<q>end list</q>).  This is an example of explicit scope closure, versus the
			implicit scope closure of <span class="macro">Sh</span> sequences.
		</p>
		<p>
			Predictably, the <span class="macro">Bl</span> and <span class="macro">El</span> enclosure consists of list items, begun
			by the multi-line <span class="macro">It</span> macro lines.  Like <span class="macro">Sh</span>, the <span
				class="macro">It</span> macro has its scope closed by subsequent invocations of <span class="macro">It</span>.
			As expected, its scope also closes when the surrounding list is closed with <span class="macro">El</span>.
		</p>
		<p>
			The notion of a <q>tagged</q> list comes from the flag provided to the <span class="macro">Bl</span> macro, <span
				class="macroflag">tag</span>.  Until now, we've discussed only macros and macro arguments.  Only a handful of
			macros also accept flags, which themselves may have arguments.  In our example, the <span class="macro">Bl</span> macro
			accepts a second flag, <span class="macroflag">width</span>, which accepts the argument <span
				class="macroarg">Ds</span>.  This instructs the formatter that the tag portion of the list has width <q>Ds</q>,
			which is shorthand for <q>default spacing</q>.
		</p>
		<p>
			Let's look closer at the input line 
		</p>
		<div class="mdocin">
			.Ar prefix .
		</div>
		<p>
			Note that it's correctly rendered with the period flushed up against the text, although the period itself isn't
			underlined.
		</p>
		<div class="mdocout">
			<dl style="margin-top: 0.00em;margin-bottom: 0.00em;" class="mdoc-list mdoc-list-tag">
				<dt class="mdoc-list-tag">
					<i class="mdoc-arg">prefix</i></dt>
				<dd class="mdoc-list-tag" style="margin-left: 6.00ex;">
					Prefix the output with <i class="mdoc-arg">prefix</i>.</dd>
			</dl>
		</div>
		<p>
			By making the punctuation a separate argument, we distinguish it from the term <span class="screen">prefix</span>, and
			thus it is not underlined.  The formatter is smart enough to distinguish standalone punctuation.  When writing an <span
				class="lang">mdoc</span> manual, punctuation should always be separated from macro arguments unless it's part of
			the argument itself.  This allows the formatter to correctly intuit end-of-line spacing.
		</p>
		<p>
			Let's piece this all together.  You'll recognise the <span class="macro">Dd</span>, <span class="macro">Dt</span>, and
			<span class="macro">Os</span> macros from the last section, although the <span class="macro">Dt</span> argument has
			changed with our command name.
		</p>
		<div class="mdocin">
			.Dd May 30, 2011
			<br />
			.Dt HELLO 1
			<br />
			.Os
			<br />
			.Sh NAME
			<br />
			.Nm hello
			<br />
			.Nd print \(dqhello, world\(dq
			<br />
			.Sh SYNOPSIS
			<br />
			.Nm 
			<br />
			.Op Fl C 
			<br />
			.Op Fl o Ar output 
			<br />
			.Op Ar prefix 
			<br />
			.Sh DESCRIPTION
			<br />
			The
			<br />
			.Nm
			<br />
			function prints
			<br />
			.Qq hello, world
			<br />
			and returns.
			<br />
			.Pp 
			<br />
			Its arguments are as follows:
			<br />
			.Bl -tag -width Ds 
			<br />
			.It Fl C
			<br />
			Print only uppercase letters.
			<br />
			.It Fl o Ar output 
			<br />
			Write to file
			<br />
			.Ar output .
			<br />
			.It Ar prefix
			<br />
			Prefix the output with
			<br />
			.Ar prefix .
			<br />
			.El
		</div>
		<p>
			Notice that we don't repeat the <span class="macro">Op</span> macros in the <span class="sec">DESCRIPTION</span>,
			although we stipulate them in the <span class="sec">SYNOPSIS</span>.  This is because we document the flags and
			arguments themselves in the <span class="sec">DESCRIPTION</span>, not the calling syntax of the command.
		</p>
		<p>
			Finally, let's accomodate for command errors by stipulating the exit status of the command.  To do this, we add a new
			section to the end of the manual, <span class="sec">EXIT STATUS</span>, consisting of a single macro.  We didn't add
			this to <span class="file">hi.1</span> because we didn't stipulate any exit state; however, it's good practise to always
			include this section, even if your command only exits in one way.
		</p>
		<div class="mdocin">
			.Sh EXIT STATUS
			<br />
			.Ex -std
		</div>
		<p>
			The <span class="macro">Ex</span> macro is special in that it always accepts a flag, <span class="macroflag">std</span>.
			This is by convention.  Although you can specify an argument to <span class="macro">Ex</span>, it works like <span
				class="macro">Nm</span> without arguments in that it reproduces the name of the document as last invoked with
			<span class="macro">Nm</span>.  It prints a standardised message about the exit status of the command.
		</p>
		<div class="mdocout">
			<div class="mdoc-section">
				<h1>EXIT STATUS</h1>
				The <b class="mdoc-utility">hello</b> utility exits 0 on success, and &gt;0 if an error occurs.
			</div>
		</div>
		<p>
			With our manual complete, let's go over our checklist.
		</p>
		<dl>
			<dt>Did I describe the calling syntax of the command?</dt>
			<dd>Yes, including flags and arguments.</dd>
			<dt>Did I describe each flag and argument of the command?</dt>
			<dd>Yes for all flags and arguments.</dd>
			<dt>Did I describe the command's operation?</dt>
			<dd>Yes, that it prints <span class="screen">hello, world</span>.</dd>
			<dt>Did I describe the command's exit status?</dt>
			<dd>Yes, that it returns a non-zero exit code on failure.</dd>
			<dt>Did I describe referenced files and environment variables?</dt>
			<dd>This is not applicable to this manual.</dd>
		</dl>
		<p>
			Of course, most real manuals have many other useful bits of information, such as author names, referenced standards,
			files, and so on.  I'll describe these in detail in later chapters of this book.
		</p>
		<table class="nav">
			<tbody>
				<tr>
					<td class="nav-home"><a href="index.html">Home</a></td>
					<td class="nav-next"><a href="part1-1-3.xhtml">Next</a></td>
					<td class="nav-history"><a href="/cgi-bin/cvsweb/part1-1-2.xml?cvsroot=manpages">History</a></td>
				</tr>
			</tbody>
		</table>
		<p class="edits">
			Last edited by $Author$ on $Date$.  Copyright &copy; 2011, Kristaps Dzonsons.  CC BY-SA.
		</p>
	</body>
</html>

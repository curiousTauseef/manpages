<?xml version="1.0" encoding="UTF-8"?>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/xml; charset=utf-8"/>
		<title>Build System</title>
		<link rel="stylesheet" href="css/book.css" type="text/css"/>
	</head>
	<body>
		<h3>
			Build System
		</h3>
		<p>
			On modern <a class="term" href="glossary.xml#unix">UNIX</a> systems, the method for build management is overwhelmingly
			the <a class="cmd term" href="glossary.xml#make">make</a> utility.  Although there are two disjoint <span
				class="cmd">make</span> implementations in use (namely by for <a href="glossary.xml#gnu" class="term">GNU</a>
			and <a href="glossary.xml#bsd_unix" class="term">BSD UNIX</a> systems), I consider the syntax common to both.
		</p>
		<p>
			In this section, I'll assume the file <span class="file">Makefile</span> already exists, and is used to build a system
			where one wishes to incorporate <span class="lang">mdoc</span> files.
		</p>
		<div class="screen">
			all: foo
			<br />
			<br />
			clean:
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;rm -f foo foo.o
			<br />
			<br />
			install: all
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;install -m 0755 foo /usr/local/bin
			<br />
			<br />
			foo: foo.o
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;cc -o foo foo.o
		</div>
		<p>
			A rigorous analysis of this syntax is beyond the scope of this book (do consult your system's documentation for the <span
				class="cmd">make</span> command with <span class="cmdline">man make</span>).  It defines the targets <span
				class="screen">all</span>, <span class="screen">clean</span>, and <span class="screen">install</span>: build,
			clean up, and install the utility, respectively.
		</p>
		<h4>
			File Extension
		</h4>
		<p>
			First, it's important to settle upon an input and output file extension, as <span class="cmd">make</span> tracks file
			status by way of comparing the time-stamp of a file's input (which may be multiple files) and output (called the
			target).  In short, if the target is older than any of the input files, it is rebuilt.  The input files are created and
			maintained by the developer; the output files are built by <span class="cmd">make</span>.
		</p>
		<p>
			For simplicity, I use the standard <span class="file">.1</span>, <span class="file">.2</span>, and so on convention for
			the target (the output).  I then use <span class="file">.in.1</span> and so on for input.  Thus, it is necessary to
			notify the <span class="cmd">make</span> utility of these new extensions before all other rules;
		</p>
		<div class="screen">
			.SUFFIXES: .in.1 .1
		</div>
		<p>
			If more categories are built, these would need to be added (e.g., <span class="screen">.in.3 .3</span>, etc.).
		</p>
		<h4>
			Build Rules
		</h4>
		<p>
			A build rule is required to translate input to output.  Let's begin with a general rule to establish that the <span
				class="lang">mdoc</span> syntax is correct.  We'll add this to the target building the main system: this way,
			all changes to the <span class="lang">mdoc</span> input file will be syntax-checked when <span
				class="cmdline">make</span> is invoked.
		</p>
		<div class="screen">
			.in.1.1:
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;mandoc -Tlint $&lt;
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;#troff -mandoc $&lt; &gt;/dev/null
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;cp -f $&lt; $@
		</div>
		<p>
			We also need to build the target and clean it.  Assume that <span class="file">foo.1</span> is the output file and <span
				class="file">foo.in.1</span>, the input.
		</p>
		<div class="screen">
			all: foo foo.1
			<br />
			<br />
			clean:
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;rm -f foo foo.o foo.1
		</div>
		<h4>
			Result
		</h4>
		<p>
			Putting these together, the new <span class="file">Makefile</span> is as follows:
		</p>
		<div class="screen">
			.SUFFIXES: .in.1 .1
			<br />
			<br />
			all: foo foo.1
			<br />
			<br />
			clean:
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;rm -f foo foo.o foo.1
			<br />
			<br />
			install: all
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;install -m 0755 foo /usr/local/bin
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;install -m 0644 foo.1 /usr/local/share/man/man1
			<br />
			<br />
			foo: foo.o
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;cc -o foo foo.o
			<br />
			<br />
			.in.1.1:
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;mandoc -Tlint $&lt;
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;#troff -mandoc $&lt; &gt;/dev/null
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;cp -f $&lt; $@
		</div>
		<h4>
			Formatted Output
		</h4>
		<p>
			Let's build an <a class="term" href="glossary.xml#html">HTML</a> manual with the <span class="cmdline">make www</span>
			rule.  For simplicity, we won't install this file; it's merely for instruction.  This rule will translate the built
			manual <span class="file">foo.1</span> into an HTML file <span class="file">foo.1.html</span>.
		</p>
		<div class="screen">
			.SUFFIXES: .in.1 .1 .1.html
		</div>
		<p>
			Let's let our rule include a <a class="term" href="glossary.xml#css">CSS</a> file.  Note that the traditional <a
				class="term cmd" href="glossary.xml#troff">troff</a> utility doesn't include HTML output.
		</p>
		<div class="screen">
			foo.1.html: style.css
			<br />
			<br />
			.1.1.html:
			<br />
			&nbsp;&nbsp;&nbsp;&nbsp;mandoc -Thtml -Ostyle=style.css $&lt; &gt;$@
		</div>
		<p>
			The target rule is simply as follows:
		</p>
		<div class="screen">
			www: foo.1.html
		</div>
		<p>
			The reason for building from <span class="file">foo.1</span> instead of <span class="file">foo.in.1</span> is that we
			may wish to postprocess the <span class="file">foo.1</span> file after it has been created.  However, this is entirely
			decision of the programmer.
		</p>
		<table class="nav">
			<tbody>
				<tr>
					<td class="nav-home"><a href="http://manpages.bsd.lv/index.html">Home</a></td>
					<td class="nav-next"><a href="part3-2-2.xml">Next</a></td>
					<td class="nav-history"><a href="http://manpages.bsd.lv/cgi-bin/cvsweb/part3-2-1.xml?cvsroot=manpages">History</a></td>
				</tr>
			</tbody>
		</table>
		<p class="edits">
			Last edited by $Author$ on $Date$.  Copyright &copy; 2011, Kristaps Dzonsons.  CC BY-SA.
		</p>
	</body>
</html>

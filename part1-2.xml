<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
		<title>Functions</title>
		<link rel="stylesheet" href="css/book.css" type="text/css"/>
	</head>
	<body>
		<h2>
			Functions
		</h2>
		<p>
			Programming functions are a significant part of the UNIX canon, from the system call interface to the <a class="term"
				href="glossary.xhtml#libc">C library</a>.  If you're a C or C++ developer, chances are you've at least glanced
			through the manuals of functions such as <span class="func">socket</span>, <span class="func">printf</span>, or <span
				class="func">memmove</span>.
		</p>
		<p>
			The <span class="lang">mdoc</span> format is designed primarily with the <a class="term" href="glossary.xhtml#c">C
				language</a> and Fortran language in mind, although it also works with C++, Perl, Tcl, and other imperative
			languages.  In fact, most any language with functions (or subroutines) and variables will work, typed or not.
		</p>
		<p>
			Before beginning, we need to change our mental checklist for a complete manual.  Since function manuals can document
			more than just function parts, our manual must grow to account for complexity.
		</p>
		<ul>
			<li>Do I describe the preprocessing and linking information?</li>
			<li>Do I describe the calling syntax of each function and variable?</li>
			<li>Do I describe the type of each function and variable?</li>
			<li>Do I describe each argument in each calling syntax?</li>
			<li>Do I describe each function's operation?</li>
			<li>Do I describe each function's side effects?</li>
		</ul>
		<p>
			A function is any callable instruction, be it a C function, routine, or macro.  A variable may also be a C variable or
			macro.  I'll consistently use the function and variable terminology in this book.
		</p>
		<p>
			In general, you don't have to be knowledgeable of C to understand this section, but it helps to have a grasp of basic
			programming structure, such as functions, function prototypes, and header files.  
		</p>
		<p>
			In any event, I'll refer to a header file as a text file consisting of function prototypes.  Header files for the C
			language, such as in our examples, end with the <span class="file">.h</span> suffix.  A C function prototype indicates
			the calling syntax of a function, such as the following.
		</p>
		<div class="mdocin">
			int
			<br />
			isspace(int c);
		</div>
		<p>
			In this, the C function <span class="screen">isspace</span>, notationally referred to as <span
				class="func">isspace</span>, has a single argument <span class="screen">int c</span> (an integer named <span
				class="var">c</span>) and returns a value of type <span class="type">int</span> (another integer).  Multiple
			arguments are comma-separated.
		</p>
		<table class="nav">
			<tbody>
				<tr>
					<td class="nav-home"><a href="http://manpages.bsd.lv/index.html">Home</a></td>
					<td class="nav-next"><a href="part1-2-1.xhtml">Next</a></td>
					<td class="nav-history"><a href="http://manpages.bsd.lv/cgi-bin/cvsweb/part1-2.xml?cvsroot=manpages">History</a></td>
				</tr>
			</tbody>
		</table>
		<p class="edits">
			Last edited by $Author$ on $Date$.  Copyright &copy; 2011, Kristaps Dzonsons.  CC BY-SA.
		</p>
	</body>
</html>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/>
		<title>Simple Command</title>
		<link rel="stylesheet" href="css/book.css" type="text/css"/>
	</head>
	<body>
		<h3>
			Simple Command
		</h3>
		<p>
			Consider a simple UNIX command <span class="cmd">hi</span> that prints <span class="screen">hello, world</span> and
			exits.  Let's create a manual page <span class="file">hi.1</span> documenting this command.  In this example, I'll begin
			with the full manual.  In later examples, we'll build up the manual piece by piece.
		</p>
		<div class="mdocin">
			.Dd May 30, 2011
			<br />
			.Dt HI 1
			<br />
			.Os
			<br />
			.Sh NAME
			<br />
			.Nm hi
			<br />
			.Nd print \(dqhello, world\(dq
			<br />
			.Sh SYNOPSIS
			<br />
			.Nm
			<br />
			.Sh DESCRIPTION
			<br />
			Print
			<br />
			.Qq hello, world
			<br />
			and exit.
		</div>
		<p>
			How to display this manual page depends on the system you're using.
		</p>
		<p>
			Historically, the command of choice for formatting UNIX manuals for a <a class="term"
				href="glossary.xhtml#terminal">terminal</a> was <span class="cmd">nroff</span>.  For now, let's stick with that.
			<!--If you're running on a non-UNIX system, or <span class="cmd">nroff</span> isn't installed, consult Part III of this
			book for a list of alternatives.-->
		</p>
		<p>
			To display output, you must invoke <span class="cmd">nroff</span> as <span class="cmdline">nroff -mandoc -Tascii
				file</span>.  The <span class="cmdflag">mandoc</span> flag indicates that input is in <span
				class="lang">mdoc</span>.  Hereafter, I'll refer to <span class="cmd">nroff</span> simply as <q>the
				formatter</q> to avoid confusion.
		</p>
		<div class="mdocout">
			<div class="mdoc-section">
				<h1>NAME</h1>
				<b class="mdoc-name">hi</b> &#8212; <span class="mdoc-desc">print &#34;hello, world&#34;</span>
			</div>
			<div class="mdoc-section">
				<h1>SYNOPSIS</h1>
				<table class="mdoc-synopsis">
					<col style="width: 2.00ex;"/>
					<col/>
					<tbody>
						<tr>
							<td>
								hi
							</td>
							<td>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<div class="mdoc-section">
				<h1>DESCRIPTION</h1>
				Print &#8220;hello, world&#8221; and exit.
			</div>
		</div>
		<p>
			Let's start by studying the input and output.  We can see most of the text translated into output, for instance, the
			capitalised <span class="screen">NAME</span> input is left-justified and in bold text.  Same with <span class="screen">
				SYNOPSIS</span> and <span class="screen">DESCRIPTION</span>, although the preceding <span
				class="screen">.Sh</span> is missing.  We can even see the output sentence <span class="screen">Print "hello,
				world" and exit</span> spread over lines 10&ndash;12, although it's separated by the input line
		</p>
		<div class="mdocin">
			.Qq hello, world
		</div>
		<p>
			Let's take a closer look at this fragment.
		</p>
		<p>
			The <span class="screen">.Qq</span> is part of <span class="lang">mdoc</span>'s instruction syntax.  Input lines
			beginning with a dot are instructions to the formatter called <a class="term" href="glossary.xhtml#mdoc_macro">mdoc
				macros</a>, or just macros for short.  The macro name is a terse two or three-character word following the dot,
			for example, <span class="macro">Qq</span>.  The words following the <span class="macro">Qq</span> to the end of line
			are arguments in the <a class="term" href="glossary.xhtml#mdoc_scope">scope</a> of the macro; that is, data interpreted
			within the context of the macro.
		</p>
		<p>
			Thus, the fragment
		</p>
		<div class="mdocin">
			Print
			<br />
			.Qq hello, world
			<br />
			and exit.
		</div>
		<p>
			is interpreted as text, then a macro <span class="macro">Qq</span> with scoped arguments <span class="screen">hello,
				world</span>, then more text.
		</p>
		<p>
			It's obvious, in looking at the input and output, that <span class="macro">Qq</span> instructs the formatter to quote
			its arguments.  Macro names vaguely identify their purpose with their choice of letter combination.
		</p>
		<p>
			The <span class="macro">Qq</span> is limited in scope to its invocation line.  But notice that the formatter recognised
			the content between <span class="macro">Sh</span> macros as requiring indentation.  So it's clear that <span
				class="lang">mdoc</span> also has a concept of multi-line scope.
		</p>
		<p>
			In fact, <span class="macro">Sh</span> has both line arguments, for the name of the section; and multi-line arguments,
			for section content.
		</p>
		<div class="mdocin">
			.Sh SECTION 1
			<br />
			Section text.
			<br />
			.Sh SECTION 2
			<br />
			New section text.
		</div>
		<p>
			Furthermore, the existance of <span class="macro">Qq</span> within the <span class="macro">Sh</span> scope means that
			scopes may be nested.  In the next section we'll see how multiple macros may even be specified on a single line.
		</p>
		<div class="mdocin">
			.Sh SECTION 1
			<br />
			Section text.
			<br />
			.Sh SECTION 2
			<br />
			.Qq Section text nested in a quote.
		</div>
		<p>
			We can envision this scoping as follows, with an <span style="border: 1px solid green; padding: 2px;">outer scope</span>
			and <span style="border: 1px solid blue; padding: 2px;">inner scope</span>:
		</p>
		<div class="mdocin" style="border: 1px solid green; padding: 2px;">
			.Sh SECTION 2
			<br />
			.Qq <span style="border: 1px solid blue;">Section text nested in a quote.</span>
		</div>
		<p>
			Now let's return to <span class="file">hi.1</span> with this new knowledge of macros and scopes.
		</p>
		<p>
			We see seven macros in total, <span class="macro">Dd</span>, <span class="macro">Dt</span>, <span
				class="macro">Os</span>, <span class="macro">Sh</span>, <span class="macro">Nm</span>, <span
				class="macro">Nd</span>, and <span class="macro">Qq</span>.  We know now that <span class="macro">Qq</span>
			encloses its arguments in double-quotes, <span class="macro">Sh</span> begins a named section with indented multi-line
			arguments.  
		</p>
		<p>
			Of the remaining macros, <span class="macro">Dd</span> accepts the last modification date of the manual in <q>month day,
				year</q> format.  <span class="macro">Dt</span> refers to the manual's title, <span class="screen">HI</span>,
			and its category, <span class="cat">1</span>.  Note that <span class="screen">HI</span> is uppercase: by convention,
			<span class="macro">Dt</span> should always accept a capitalised document title.  We'll talk more about titles and
			sections in later chapters of this book.  For now, let's assume that a category number identifies the topic of the
			manual, where <span class="cat">1</span> refers to utilities.
		</p>
		<p>
			Next, <span class="macro">Os</span> indicates the operating system of the system running the formatter.  If left
			unspecified, the formatter will return the current operating system (e.g., <span class="screen">OpenBSD 4.9</span>,
			<span class="screen">Linux 2.6.32-5</span>, or <span class="screen">Microsoft Windows XP</span>).
		</p>
		<div class="mdocin">
			.Dd May 30, 2011
			<br />
			.Dt HI 1
			<br />
			.Os \" Current operating system.
		</div>
		<p>
			Note that text following the <span class="screen">\&quot;</span> marker is an <span class="lang">mdoc</span> comment,
			which may have the following syntax:
		</p>
		<div class="mdocin">
			Text. \" Comment to end of the line.
			<br />
			.\" Extending across the full line.
		</div>
		<p>
			Moving along, <span class="macro">Nm</span> accepts the manual's name.  This differs from the title, <span
				class="macro">Dt</span>, in that a single manual may document multiple components.  We'll see examples of this
			in later chapters.  Finally, <span class="macro">Nd</span> accepts a brief, one-line description of the command.
		</p>
		<div class="mdocin">
			.Sh NAME
			<br />
			.Nm hi
			<br />
			.Nd print \(dqhello, world\(dq
		</div>
		<p>
			You can see that we re-invoke <span class="macro">Nm</span> in the <span class="sec">DESCRIPTION</span>, only without
			arguments.  The formatter is smart enough to fill in its argument with the last supplied argument, in this case being
			<span class="screen">hi</span>.
		</p>
		<p>
			Since our simple command has no command-line arguments, its invocation is simply the command name.
		</p>
		<div class="mdocin">
			.Sh SYNOPSIS
			<br />
			.Nm
		</div>
		<p>
			Piecing this all together, we now have the following.
		</p>
		<div class="mdocin">
			.Dd May 30, 2011
			<br />
			.Dt HI 1
			<br />
			.Os
			<br />
			.Sh NAME
			<br />
			.Nm hi
			<br />
			.Nd print \(dqhello, world\(dq
			<br />
			.Sh SYNOPSIS
			<br />
			.Nm
			<br />
			.Sh DESCRIPTION
			<br />
			Print
			<br />
			.Qq hello, world
			<br />
			and exit.
		</div>
		<p>
			In this example, you've noticed that <span class="screen">\(dqhello, world\(dq</span> has the same behaviour of the
			<span class="macro">Qq</span> invocation.  In <span class="lang">mdoc</span>, quotation marks signify literal strings.
			Thus, we used an escape character <span class="screen">\(dq</span> to render <span class="screen">&quot;</span>.
		</p>
		<p>
			You may ask why not just use <span class="macro">Qq</span>, such as
		</p>
		<div class="mdocin">
			.Nd print
			<br />
			.Qq hello, world
		</div>
		<p>
			For the time being, assume that <span class="macro">Nd</span> must have its scope on the invocation line.
			Strictly-speaking, we could have written 
		</p>
		<div class="mdocin">
			.Nd print "hello, world"
		</div>
		<p>
			but this encourages dangerous behaviour in assuming that quoted arguments may not affect output.  This isn't always the
			case!  We'll see later how quoted terms on macro lines change the grouping of arguments &mdash; at times non-intuitively.
		</p>
		<p>
			Before moving on to the next section, let's look quickly over our checklist for a well-formed manual.
		</p>
		<dl>
			<dt>Did I describe the calling syntax of the command?</dt>
			<dd>Yes.  It was only the name of the macro (no arguments or flags).</dd>
			<dt>Did I describe each flag and argument of the command?</dt>
			<dd>There were none, so yes.</dd>
			<dt>Did I describe the command's operation?</dt>
			<dd>Yes, it prints <span class="screen">hello, world</span> and exits.</dd>
			<dt>Did I describe the command's exit status?</dt>
			<dd>No, we only mentioned that it exits.</dd>
			<dt>Did I describe referenced files and environment variables?</dt>
			<dd>This is not applicable.</dd>
		</dl>
		<p>
			To the effect of the exit status, let's modify the <span class="sec">DESCRIPTION</span> slightly for clarity.
		</p>
		<div class="mdocin">
			.Sh DESCRIPTION
			<br />
			Print
			<br />
			.Qq hello, world
			<br />
			and exit 0.
		</div>
		<p>
			Of course, our command must actually do so!  For simplicity's sake, let's assume that this is the case.
		</p>
		<p>
			With our simple, well-documented example in mind, let's move on to a more realistic UNIX command.
		</p>
		<table class="nav">
			<tbody>
				<tr>
					<td class="nav-home"><a href="index.html">Home</a></td>
					<td class="nav-next"><a href="part1-1-2.xhtml">Next</a></td>
					<td class="nav-history"><a href="/cgi-bin/cvsweb/part1-1-1.xml?cvsroot=manpages">History</a></td>
				</tr>
			</tbody>
		</table>
		<p class="edits">
			Last edited by $Author$ on $Date$.  Copyright &copy; 2011, Kristaps Dzonsons.  CC BY-SA.
		</p>
	</body>
</html>

